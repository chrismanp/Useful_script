--- linux-4.7.1.old/arch/x86/mm/fault.c	2016-08-16 02:35:15.000000000 -0500
+++ linux-4.7.1/arch/x86/mm/fault.c	2018-10-27 02:39:50.727481762 -0500
@@ -15,6 +15,8 @@
 #include <linux/context_tracking.h>	/* exception_enter(), ...	*/
 #include <linux/uaccess.h>		/* faulthandler_disabled()	*/
 
+#include <linux/kernel.h>
+
 #include <asm/cpufeature.h>		/* boot_cpu_has, ...		*/
 #include <asm/traps.h>			/* dotraplinkage, ...		*/
 #include <asm/pgalloc.h>		/* pgd_*(), ...			*/
@@ -558,6 +560,9 @@
 		goto bad;
 
 	printk("PTE %lx", pte_val(*pte));
+	pte_mkwrite(*pte);
+	printk(" Mkwrite PTE %lx", pte_val(*pte));
+
 out:
 	printk("\n");
 	return;
@@ -860,6 +865,8 @@
 		 * layout, pretend that user-mode accesses to kernel addresses
 		 * are always protection faults.
 		 */
+
+		printk("%s %s %d\n", __FILE__, __func__, __LINE__);
 		if (address >= TASK_SIZE_MAX)
 			error_code |= PF_PROT;
 
@@ -869,6 +876,36 @@
 		tsk->thread.cr2		= address;
 		tsk->thread.error_code	= error_code;
 		tsk->thread.trap_nr	= X86_TRAP_PF;
+		
+
+                printk("%s %s %d\n", __FILE__, __func__, __LINE__);
+		dump_stack();
+		printk("------------------------\n");
+		printk("Error code : %p Faulting address : %p\n", error_code, address);
+
+		struct mm_struct * mm = current->mm;
+		pgd_t * pgd = pgd_offset(mm, address);
+	        pud_t * pud = pud_offset(pgd, address);
+		pmd_t * pmd = pmd_offset(pud, address);
+		pte_t * pte = pte_offset_map(pmd, address);
+		//set_pte_at(mm, address, pte, pte_mkwrite(*pte));
+		//pte_mkwrite(*pte);
+		
+		dump_pagetable(address);
+		
+		printk("%s %s %d : Address : %lx has a pte of %lx\n", __FILE__, __func__, __LINE__, address, (*pte)); 
+		
+                struct vm_area_struct *vma, *prev;
+		
+                vma = find_vma(current->mm, address);
+		if(vma)
+		  printk("%s %s %d old vma flags : %lx \n", __FILE__, __func__, __LINE__, vma->vm_flags);
+		
+                vma->vm_flags |= VM_WRITE;
+		vma_wants_writenotify(vma);
+		vma_set_page_prot(vma);
+		printk("%s %s %d new vma flags : %lx \n", __FILE__, __func__, __LINE__, vma->vm_flags);
+                printk("------------------\n");
 
 		force_sig_info_fault(SIGSEGV, si_code, address, tsk, vma, 0);
 
@@ -935,10 +972,14 @@
 	 * But, doing it this way allows compiler optimizations
 	 * if pkeys are compiled out.
 	 */
-	if (bad_area_access_from_pkeys(error_code, vma))
-		__bad_area(regs, error_code, address, vma, SEGV_PKUERR);
-	else
-		__bad_area(regs, error_code, address, vma, SEGV_ACCERR);
+        if (bad_area_access_from_pkeys(error_code, vma)){
+	  printk("%s %s %d\n", __FILE__, __func__, __LINE__);
+	  __bad_area(regs, error_code, address, vma, SEGV_PKUERR);
+	}
+        else{
+             printk("%s %s %d\n", __FILE__, __func__, __LINE__);
+	     __bad_area(regs, error_code, address, vma, SEGV_ACCERR);
+	}
 }
 
 static void
@@ -1118,23 +1159,33 @@
 	 * page.
 	 */
 	if (!arch_vma_access_permitted(vma, (error_code & PF_WRITE),
-				(error_code & PF_INSTR), foreign))
-		return 1;
+				       (error_code & PF_INSTR), foreign)){
 
+	        printk("%s %s %d\n", __FILE__, __func__, __LINE__);	  
+		return 1;
+	}
 	if (error_code & PF_WRITE) {
+	        //printk("%s %s %d\n", __FILE__, __func__, __LINE__);
 		/* write, present and write, not present: */
-		if (unlikely(!(vma->vm_flags & VM_WRITE)))
-			return 1;
+		if (unlikely(!(vma->vm_flags & VM_WRITE))){
+               	  printk("%s %s %d\n", __FILE__, __func__, __LINE__);
+		  return 1;
+
+		}
 		return 0;
 	}
 
 	/* read, present: */
-	if (unlikely(error_code & PF_PROT))
+	if (unlikely(error_code & PF_PROT)){
+	        printk("%s %s %d\n", __FILE__, __func__, __LINE__);
 		return 1;
-
+	}
 	/* read, not present: */
-	if (unlikely(!(vma->vm_flags & (VM_READ | VM_EXEC | VM_WRITE))))
+	if (unlikely(!(vma->vm_flags & (VM_READ | VM_EXEC | VM_WRITE)))){
+	        printk("%s %s %d\n", __FILE__, __func__, __LINE__);
 		return 1;
+	}
+
 
 	return 0;
 }
@@ -1343,6 +1394,7 @@
 	 */
 good_area:
 	if (unlikely(access_error(error_code, vma))) {
+	        printk("%s %s %d\n", __FILE__, __func__, __LINE__);
 		bad_area_access_error(regs, error_code, address, vma);
 		return;
 	}
